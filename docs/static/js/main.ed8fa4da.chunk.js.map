{"version":3,"sources":["components/AddCategories.js","components/GifItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategories","_ref","setCategories","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","Fragment","onSubmit","e","preventDefault","trim","console","log","type","placeholder","onChange","target","value","GifItem","title","url","className","src","alt","getGifs","asyncToGenerator","_regeneratorRuntime","mark","_callee","category","_yield$yield$fetch$js","_yield$yield$fetch$js2","gifs","wrap","_context","prev","next","concat","fetch","sent","json","data","map","img","id","images","downsized_medium","abrupt","stop","_x","apply","this","arguments","useFetchGifs","setImages","_useState3","_useState4","isLoading","setIsLoading","getImages","useFetchGifs_regeneratorRuntime","useEffect","GifGrid","_useFetchGifs","components_GifItem","assign","key","GifExpertApp","categories","components_AddCategories","includes","toConsumableArray","components_GifGrid","crypto","randomUUID","reactDOM","createRoot","document","getElementById","render","src_GifExpertApp"],"mappings":"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","file":"static/js/main.ed8fa4da.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nconst AddCategories = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n\r\n     const onInputChange = (e)=>{\r\n         setInputValue(e.target.value);\r\n          \r\n     }\r\n     const onSubmit = (e)=>{\r\n          e.preventDefault();\r\n          if(inputValue.trim() === \"\"){\r\n             return console.log(\"busca un gif\");\r\n          }\r\n           setCategories(inputValue.trim());\r\n          setInputValue(\"\");\r\n     }\r\n    return ( \r\n        <>\r\n         <form onSubmit={onSubmit}>\r\n            <input \r\n            type={\"text\"}\r\n            placeholder=\"buscar gifs\"\r\n            onChange={onInputChange}\r\n            value={inputValue}\r\n            />\r\n         </form>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default AddCategories;","import React from 'react';\r\n\r\n\r\nconst GifItem = ({title,url}) => {\r\n    console.log();\r\n    return ( \r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GifItem;","export const getGifs = async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=d5qfxMDvHU4hvMZy5DCz5xMYdne5xD6m&q=${category}&limit=20`;\r\n    \r\n    const {data = []} =  await (await fetch(url)).json();\r\n    \r\n    const gifs = data.map(img=>{\r\n        return {\r\n           id: img.id ,\r\n           title: img.title,\r\n           url: img.images.downsized_medium.url             \r\n        }\r\n    })\r\n\r\n\r\n    \r\n    return gifs;\r\n\r\n}","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n     const [images,setImages] = useState([]);\r\n      const [isLoading, setIsLoading] = useState(true);\r\n    const getImages = async()=>{\r\n        const data = await getGifs(category);\r\n         setImages(data);  \r\n         setIsLoading(false);\r\n      }\r\n    useEffect(()=>{\r\n         \r\n          getImages();\r\n    },[]);\r\n\r\n       return{\r\n           images: images,\r\n           isLoading: isLoading\r\n       }\r\n}\r\n \r\nexport default useFetchGifs;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport GifItem from './GifItem';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\n\r\n    \r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {images,isLoading} = useFetchGifs(category);\r\n\r\n    console.log(isLoading) \r\n    return ( \r\n       <>\r\n          <h1>{category}</h1>\r\n           \r\n           {\r\n               isLoading && <h2>cargando..</h2> \r\n           }\r\n            \r\n            <div className='card-grid'>\r\n               {images.map(img=>{\r\n                return  <GifItem key={img.id} {...img}/>\r\n               })}\r\n            </div>\r\n            \r\n       </>\r\n     );\r\n}\r\n \r\n\r\n\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport AddCategories from './components/AddCategories';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n       \r\n\r\n    const onAddCategory = (category)=>{\r\n       if(categories.includes(category)) return;\r\n        setCategories([category,...categories]);\r\n    }\r\n\r\n\r\n    return ( \r\n       <>\r\n         {/* titulo */}\r\n          <h1>GifExpertApp</h1>\r\n           \r\n           \r\n          {/* input */}\r\n           <AddCategories setCategories={onAddCategory}/>\r\n          {/* listado de gifs */}\r\n\r\n             \r\n            \r\n               {categories.map(category=>{\r\n                return <GifGrid key={crypto.randomUUID()} category={category}/>\r\n               })}\r\n           \r\n             {/* gif item */}\r\n       </>\r\n     );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\r\nimport reactDOM from \"react-dom/client\";\r\nimport GifExpertApp from './GifExpertApp';\r\nimport \"./estilos.css\";\r\n\r\n\r\n\r\n\r\n\r\nconst root = reactDOM.createRoot(document.getElementById(\"root\"));\r\n\r\nroot.render(<GifExpertApp/>);"],"sourceRoot":""}